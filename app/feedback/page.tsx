"use client"

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Star, ArrowLeft, Play, Pause, Volume2, VolumeX, CheckCircle, MapPin, Phone, Mail, X, Send } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { getImagePath } from "@/lib/utils"
import Footer from "@/components/Footer"

interface CustomerFeedback {
    id: number
    name: string
    age?: number
    location: string
    occupation?: string
    rating: number
    content: string
    image?: string
    videoUrl?: string
    additionalImages?: string[]
    date: string
    productUsed: string
    verified: boolean
}

const feedbackData: CustomerFeedback[] = [
    {
        id: 1,
        name: "Nguy·ªÖn VƒÉn A",
        location: "H√† N·ªôi",
        occupation: "Kh√°ch h√†ng th√¢n thi·∫øt",
        rating: 5,
        content: "S·∫£n ph·∫©m NAGEN ƒë√£ gi√∫p t√¥i gi·∫£m ƒëau ch√¢n hi·ªáu qu·∫£. Ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi, d·ªãch v·ª• chuy√™n nghi·ªáp.",
        image: "/placeholder.svg?height=80&width=80&text=Avatar1",
        videoUrl: "/videos/feedback/customer1.mp4",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Before",
            "/placeholder.svg?height=200&width=300&text=After"
        ],
        date: "2024-01-15",
        productUsed: "T·∫•m l√≥t NAGEN",
        verified: true
    },
    {
        id: 2,
        name: "Tr·∫ßn Th·ªã B",
        location: "TP.HCM",
        occupation: "Kh√°ch h√†ng",
        rating: 5,
        content: "ƒê·ªôi ng≈© t∆∞ v·∫•n nhi·ªát t√¨nh, s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao. T√¥i r·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• c·ªßa NAGEN.",
        image: "/placeholder.svg?height=80&width=80&text=Avatar2",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Product",
            "/placeholder.svg?height=200&width=300&text=Usage"
        ],
        date: "2024-02-20",
        productUsed: "T·∫•m l√≥t NAGEN",
        verified: true
    },
    {
        id: 3,
        name: "L√™ VƒÉn C",
        location: "ƒê√† N·∫µng",
        occupation: "Kh√°ch h√†ng",
        rating: 5,
        content: "Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n. S·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£, hi·ªáu qu·∫£ r√µ r·ªát.",
        image: "/placeholder.svg?height=80&width=80&text=Avatar3",
        videoUrl: "/videos/feedback/customer3.mp4",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Doctor",
            "/placeholder.svg?height=200&width=300&text=Hospital"
        ],
        date: "2024-03-10",
        productUsed: "T·∫•m l√≥t NAGEN",
        verified: true
    },
    {
        id: 4,
        name: "Ph·∫°m Th·ªã Mai",
        age: 29,
        location: "H·∫£i Ph√≤ng",
        occupation: "Nh√¢n vi√™n vƒÉn ph√≤ng",
        rating: 4,
        content: "T√¥i l√†m vi·ªác vƒÉn ph√≤ng nh∆∞ng th∆∞·ªùng xuy√™n ph·∫£i ƒëi l·∫°i. T·∫•m l√≥t NAGEN gi√∫p t√¥i c·∫£m th·∫•y tho·∫£i m√°i h∆°n khi ƒëi gi√†y cao g√≥t. Ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω.",
        image: "/placeholder.svg?height=80&width=80&text=Mai",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Office",
            "/placeholder.svg?height=200&width=300&text=Heels"
        ],
        date: "2024-03-25",
        productUsed: "T·∫•m l√≥t Silhouette",
        verified: true
    },
    {
        id: 5,
        name: "Ho√†ng VƒÉn T√πng",
        age: 41,
        location: "C·∫ßn Th∆°",
        occupation: "T√†i x·∫ø",
        rating: 5,
        content: "Ngh·ªÅ t√†i x·∫ø ph·∫£i ng·ªìi l√°i xe nhi·ªÅu gi·ªù, ch√¢n t√¥i th∆∞·ªùng b·ªã t√™ v√† ƒëau. T·ª´ khi d√πng t·∫•m l√≥t NAGEN, t√¨nh tr·∫°ng n√†y ƒë√£ c·∫£i thi·ªán r√µ r·ªát. S·∫£n ph·∫©m r·∫•t ƒë√°ng ƒë·∫ßu t∆∞.",
        image: "/placeholder.svg?height=80&width=80&text=Tung",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Driver",
            "/placeholder.svg?height=200&width=300&text=Truck"
        ],
        date: "2024-04-05",
        productUsed: "T·∫•m l√≥t Endurance",
        verified: true
    },
    {
        id: 6,
        name: "Nguy·ªÖn Th·ªã H∆∞∆°ng",
        age: 35,
        location: "Hu·∫ø",
        occupation: "Y t√°",
        rating: 5,
        content: "C√¥ng vi·ªác y t√° ƒë√≤i h·ªèi ph·∫£i ƒë·ª©ng v√† ƒëi l·∫°i li√™n t·ª•c. T·∫•m l√≥t NAGEN ƒë√£ gi√∫p t√¥i gi·∫£m ƒëau ch√¢n v√† c·∫£i thi·ªán t∆∞ th·∫ø ƒë·ª©ng. T√¥i r·∫•t khuy√™n d√πng cho nh·ªØng ng∆∞·ªùi c√πng ngh·ªÅ.",
        image: "/placeholder.svg?height=80&width=80&text=Huong",
        videoUrl: "/videos/feedback/customer6.mp4",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Nurse",
            "/placeholder.svg?height=200&width=300&text=Medical"
        ],
        date: "2024-04-18",
        productUsed: "T·∫•m l√≥t Sungen",
        verified: true
    }
]

function VideoPlayer({ videoUrl, customerName }: { videoUrl: string; customerName: string }) {
    const [isPlaying, setIsPlaying] = useState(false)
    const [isMuted, setIsMuted] = useState(true)
    const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)

    const handlePlayPause = () => {
        if (videoRef) {
            if (isPlaying) {
                videoRef.pause()
            } else {
                videoRef.play()
            }
        }
    }

    return (
        <div className="relative bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl overflow-hidden aspect-video shadow-lg border border-gray-200">
            <video
                ref={setVideoRef}
                className="w-full h-full object-cover"
                muted={isMuted}
                controls={false}
                onPlay={() => setIsPlaying(true)}
                onPause={() => setIsPlaying(false)}
                poster="/placeholder.svg?height=300&width=400&text=Video"
            >
                <source src={videoUrl} type="video/mp4" />
                Video kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
            </video>

            <div className="absolute inset-0 flex items-center justify-center bg-black/20 hover:bg-black/30 transition-colors">
                <Button
                    size="lg"
                    className="bg-red-600 hover:bg-red-700 text-white shadow-xl border-2 border-white/20 rounded-full w-16 h-16 p-0"
                    onClick={handlePlayPause}
                >
                    {isPlaying ? <Pause className="w-8 h-8" /> : <Play className="w-8 h-8 ml-1" />}
                </Button>
            </div>

            <div className="absolute bottom-4 right-4 flex space-x-2">
                <Button
                    size="sm"
                    variant="ghost"
                    className="bg-black/60 hover:bg-black/80 text-white rounded-full w-10 h-10 p-0"
                    onClick={() => setIsMuted(!isMuted)}
                >
                    {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
                </Button>
            </div>

            <div className="absolute top-4 left-4">
                <Badge className="bg-red-600 text-white border-0 shadow-lg">
                    üé• Video t·ª´ {customerName}
                </Badge>
            </div>

            <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-black/20 pointer-events-none"></div>
        </div>
    )
}

function MediaGallery({ feedback }: { feedback: CustomerFeedback }) {
    const [activeTab, setActiveTab] = useState<'video' | 'images'>('video')
    const [currentImageIndex, setCurrentImageIndex] = useState(0)

    const hasVideo = !!feedback.videoUrl
    const hasImages = !!(feedback.additionalImages && feedback.additionalImages.length > 0)

    if (hasVideo && !hasImages) {
        return <VideoPlayer videoUrl={feedback.videoUrl!} customerName={feedback.name} />
    }

    if (!hasVideo && hasImages) {
        return (
            <div className="space-y-4">
                <div className="aspect-video rounded-xl overflow-hidden shadow-lg">
                    <Image
                        src={getImagePath(feedback.additionalImages![currentImageIndex])}
                        alt={`${feedback.name} - ·∫¢nh ${currentImageIndex + 1}`}
                        width={400}
                        height={300}
                        className="w-full h-full object-cover"
                    />
                </div>
                {feedback.additionalImages!.length > 1 && (
                    <div className="flex space-x-2 justify-center">
                        {feedback.additionalImages!.map((_, index) => (
                            <button
                                key={index}
                                onClick={() => setCurrentImageIndex(index)}
                                className={`w-3 h-3 rounded-full transition-all ${
                                    index === currentImageIndex ? 'bg-red-600 w-6' : 'bg-gray-300'
                                }`}
                            />
                        ))}
                    </div>
                )}
            </div>
        )
    }

    if (hasVideo && hasImages) {
        return (
            <div className="space-y-4">
                <div className="flex bg-gray-100 rounded-lg p-1">
                    <button
                        onClick={() => setActiveTab('video')}
                        className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
                            activeTab === 'video'
                                ? 'bg-white text-red-600 shadow-sm'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        üé• Video
                    </button>
                    <button
                        onClick={() => setActiveTab('images')}
                        className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
                            activeTab === 'images'
                                ? 'bg-white text-red-600 shadow-sm'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        üì∑ ·∫¢nh ({feedback.additionalImages!.length})
                    </button>
                </div>

                {activeTab === 'video' ? (
                    <VideoPlayer videoUrl={feedback.videoUrl!} customerName={feedback.name} />
                ) : (
                    <div className="space-y-4">
                        <div className="aspect-video rounded-xl overflow-hidden shadow-lg">
                            <Image
                                src={getImagePath(feedback.additionalImages![currentImageIndex])}
                                alt={`${feedback.name} - ·∫¢nh ${currentImageIndex + 1}`}
                                width={400}
                                height={300}
                                className="w-full h-full object-cover"
                            />
                        </div>
                        {feedback.additionalImages!.length > 1 && (
                            <div className="flex space-x-2 justify-center">
                                {feedback.additionalImages!.map((_, index) => (
                                    <button
                                        key={index}
                                        onClick={() => setCurrentImageIndex(index)}
                                        className={`w-3 h-3 rounded-full transition-all ${
                                            index === currentImageIndex ? 'bg-red-600 w-6' : 'bg-gray-300'
                                        }`}
                                    />
                                ))}
                            </div>
                        )}
                    </div>
                )}
            </div>
        )
    }

    return (
        <div className="bg-gradient-to-br from-blue-100 via-white to-red-100 rounded-xl p-8 text-center aspect-video flex items-center justify-center w-full shadow-inner border border-gray-200">
            <div>
                <div className="relative mb-6">
                    <Image
                        src={getImagePath(feedback.image || "/placeholder.svg")}
                        alt={feedback.name}
                        width={140}
                        height={140}
                        className="rounded-full mx-auto border-4 border-white shadow-xl"
                    />
                    <div className="absolute inset-0 rounded-full bg-gradient-to-t from-blue-500/20 to-transparent"></div>
                </div>
                <h4 className="text-xl font-bold text-blue-900 mb-2">{feedback.name}</h4>
                <p className="text-gray-600 font-medium mb-1">{feedback.location}</p>
                {feedback.occupation && (
                    <p className="text-sm text-blue-600">{feedback.occupation}</p>
                )}
                <div className="mt-4 inline-flex items-center px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm font-medium">
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Kh√°ch h√†ng ƒë√£ x√°c th·ª±c
                </div>
            </div>
        </div>
    )
}

function FeedbackCard({ feedback }: { feedback: CustomerFeedback }) {
    return (
        <Card className="overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 border-0 bg-white">
            <CardContent className="p-0">
                <div className="grid lg:grid-cols-2 gap-0">
                    <div className="p-8 space-y-6 bg-white">
                        <div className="flex items-start space-x-4">
                            <div className="relative">
                                <Image
                                    src={getImagePath(feedback.image || "/placeholder.svg")}
                                    alt={feedback.name}
                                    width={70}
                                    height={70}
                                    className="rounded-full border-3 border-blue-100 shadow-md"
                                />
                                {feedback.verified && (
                                    <div className="absolute -bottom-1 -right-1 bg-green-500 rounded-full p-1">
                                        <CheckCircle className="w-4 h-4 text-white" />
                                    </div>
                                )}
                            </div>
                            <div className="flex-1">
                                <h3 className="font-bold text-xl text-blue-900 mb-1">{feedback.name}</h3>
                                <div className="text-sm text-gray-600 space-y-1">
                                    <div className="flex items-center space-x-4">
                                        {feedback.age && <span>üéÇ {feedback.age} tu·ªïi</span>}
                                        <span>üìç {feedback.location}</span>
                                    </div>
                                    {feedback.occupation && (
                                        <p className="text-blue-700 font-medium">üíº {feedback.occupation}</p>
                                    )}
                                </div>
                            </div>
                        </div>

                        <div className="flex items-center space-x-3">
                            <div className="flex">
                                {[...Array(5)].map((_, i) => (
                                    <Star
                                        key={i}
                                        className={`w-6 h-6 ${i < feedback.rating ? "fill-yellow-400 text-yellow-400" : "text-gray-300"
                                            }`}
                                    />
                                ))}
                            </div>
                            <span className="text-lg font-semibold text-gray-700">({feedback.rating}/5)</span>
                        </div>

                        <div className="bg-red-50 rounded-lg p-4 border-l-4 border-red-500">
                            <p className="text-sm text-gray-600 mb-1">S·∫£n ph·∫©m ƒë√£ s·ª≠ d·ª•ng:</p>
                            <p className="font-bold text-red-600 text-lg">{feedback.productUsed}</p>
                        </div>

                        <blockquote className="text-gray-700 text-lg leading-relaxed italic border-l-4 border-blue-200 pl-4 bg-blue-50 p-4 rounded-r-lg">
                            "{feedback.content}"
                        </blockquote>

                        <div className="flex items-center text-sm text-gray-500 pt-2 border-t border-gray-100">
                            <span>üìÖ ƒê√°nh gi√° ng√†y: {new Date(feedback.date).toLocaleDateString('vi-VN')}</span>
                        </div>
                    </div>

                    <div className="bg-gray-50 p-8 flex items-center justify-center">
                        <MediaGallery feedback={feedback} />
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}

// Contact Form Modal Component
function ContactFormModal({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {
    const [formData, setFormData] = useState({
        name: "",
        phone: "",
        email: "",
        address: "",
        message: "",
    })
    const [isSubmitting, setIsSubmitting] = useState(false)
    const [isSubmitted, setIsSubmitted] = useState(false)

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault()
        setIsSubmitting(true)

        try {
            const response = await fetch(
                "https://workflow.realtimex.co/api/v1/executions/webhook/flowai/nagen_website_datlich/input",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        ...formData,
                        event: "tuvan",
                        source_url: typeof window !== "undefined" ? window.location.href : "",
                    }),
                }
            )

            if (response.ok) {
                setIsSubmitted(true)
            }
        } catch (error) {
            console.error("L·ªói khi g·ª≠i form:", error)
        } finally {
            setIsSubmitting(false)
        }
    }

    const resetAndClose = () => {
        setFormData({ name: "", phone: "", email: "", address: "", message: "" })
        setIsSubmitted(false)
        setIsSubmitting(false)
        onClose()
    }

    if (!isOpen) return null

    return (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[9999] p-4 backdrop-blur-sm">
            <div className="bg-white rounded-xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto animate-in fade-in-0 zoom-in-95 duration-300">
                {isSubmitted ? (
                    <div className="p-8 text-center">
                        <CheckCircle className="w-16 h-16 text-green-600 mx-auto mb-4" />
                        <h3 className="text-2xl font-bold text-green-800 mb-4">C·∫£m ∆°n b·∫°n!</h3>
                        <p className="text-gray-600 mb-6">
                            Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin c·ªßa b·∫°n v√† s·∫Ω li√™n h·ªá l·∫°i trong v√≤ng 24 gi·ªù.
                        </p>
                        <Button onClick={resetAndClose} className="bg-blue-900 hover:bg-blue-800">
                            ƒê√≥ng
                        </Button>
                    </div>
                ) : (
                    <>
                        <div className="bg-red-600 text-white p-6 rounded-t-xl">
                            <div className="flex items-center justify-between">
                                <div>
                                    <h3 className="text-xl font-bold">ƒêƒÉng k√Ω t∆∞ v·∫•n mi·ªÖn ph√≠</h3>
                                    <p className="text-red-100 mt-1">ƒê·ªÉ l·∫°i th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i li√™n h·ªá</p>
                                </div>
                                <Button variant="ghost" size="icon" onClick={resetAndClose} className="text-white hover:bg-red-700">
                                    <X className="w-5 h-5" />
                                </Button>
                            </div>
                        </div>

                        <form onSubmit={handleSubmit} className="p-6 space-y-4">
                            <div>
                                <label className="text-sm font-medium text-gray-700 mb-2 block">
                                    H·ªç v√† t√™n <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="text"
                                    required
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                    value={formData.name}
                                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                                />
                            </div>

                            <div>
                                <label className="text-sm font-medium text-gray-700 mb-2 block">
                                    S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="tel"
                                    required
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                    value={formData.phone}
                                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                                />
                            </div>

                            <div>
                                <label className="text-sm font-medium text-gray-700 mb-2 block">
                                    Email
                                </label>
                                <input
                                    type="email"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                                    placeholder="Nh·∫≠p email (kh√¥ng b·∫Øt bu·ªôc)"
                                    value={formData.email}
                                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                                />
                            </div>

                            <div>
                                <label className="text-sm font-medium text-gray-700 mb-2 block">
                                    ƒê·ªãa ch·ªâ
                                </label>
                                <input
                                    type="text"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ (kh√¥ng b·∫Øt bu·ªôc)"
                                    value={formData.address}
                                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                                />
                            </div>

                            <div>
                                <label className="text-sm font-medium text-gray-700 mb-2 block">
                                    Ghi ch√∫
                                </label>
                                <textarea
                                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                                    placeholder="Nh·∫≠p ghi ch√∫ (kh√¥ng b·∫Øt bu·ªôc)"
                                    rows={3}
                                    value={formData.message}
                                    onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                                />
                            </div>

                            <div className="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-500">
                                <p className="text-sm text-blue-800 flex items-start">
                                    <CheckCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                                    <span>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong v√≤ng 24h ƒë·ªÉ t∆∞ v·∫•n mi·ªÖn ph√≠.</span>
                                </p>
                            </div>

                            <div className="pt-4">
                                <Button 
                                    type="submit" 
                                    disabled={isSubmitting} 
                                    className="w-full bg-red-600 hover:bg-red-700 text-white py-3 font-semibold"
                                >
                                    {isSubmitting ? "ƒêang g·ª≠i..." : "G·ª≠i th√¥ng tin"}
                                    {!isSubmitting && <Send className="w-4 h-4 ml-2" />}
                                </Button>
                            </div>
                        </form>
                    </>
                )}
            </div>
        </div>
    )
}

export default function FeedbackPage() {
    const [filter, setFilter] = useState<string>("all")
    const [isContactModalOpen, setIsContactModalOpen] = useState(false)

    const filteredFeedback = feedbackData.filter(feedback => {
        if (filter === "all") return true
        if (filter === "video") return !!feedback.videoUrl
        if (filter === "5-star") return feedback.rating === 5
        return true
    })

    useEffect(() => {
        // SEO Meta Tags
        document.title = "Ph·∫£n h·ªìi kh√°ch h√†ng v·ªÅ T·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN | ƒê√°nh gi√° th·∫≠t t·ª´ ng∆∞·ªùi d√πng"
        
        // Meta Description
        const setMetaTag = (name: string, content: string, property = false) => {
            const selector = property ? `meta[property="${name}"]` : `meta[name="${name}"]`
            let meta = document.querySelector(selector) as HTMLMetaElement
            if (meta) {
                meta.setAttribute('content', content)
            } else {
                meta = document.createElement('meta')
                if (property) {
                    meta.setAttribute('property', name)
                } else {
                    meta.setAttribute('name', name)
                }
                meta.setAttribute('content', content)
                document.head.appendChild(meta)
            }
        }

        setMetaTag('description', 'Xem ph·∫£n h·ªìi th·∫≠t t·ª´ h∆°n 4 tri·ªáu kh√°ch h√†ng v·ªÅ t·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN. Video v√† ·∫£nh minh ch·ª©ng t·ª´ ng∆∞·ªùi d√πng th·ª±c t·∫ø t·∫°i Vi·ªát Nam.')
        setMetaTag('keywords', 'ph·∫£n h·ªìi kh√°ch h√†ng NAGEN, ƒë√°nh gi√° t·∫•m l√≥t ch√¢n, feedback NAGEN, kh√°ch h√†ng n√≥i g√¨ v·ªÅ NAGEN, review t·∫•m l√≥t v√≤m b√†n ch√¢n, testimonial NAGEN')
        setMetaTag('author', 'NAGEN Vietnam')
        setMetaTag('robots', 'index, follow')
        
        // Open Graph Tags
        setMetaTag('og:title', 'Ph·∫£n h·ªìi kh√°ch h√†ng v·ªÅ T·∫•m l√≥t NAGEN - ƒê√°nh gi√° th·∫≠t t·ª´ ng∆∞·ªùi d√πng', true)
        setMetaTag('og:description', 'H∆°n 4 tri·ªáu ng∆∞·ªùi tin d√πng NAGEN tr√™n to√†n th·∫ø gi·ªõi. Xem video v√† ·∫£nh ph·∫£n h·ªìi th·∫≠t t·ª´ kh√°ch h√†ng Vi·ªát Nam.', true)
        setMetaTag('og:type', 'website', true)
        setMetaTag('og:url', window.location.href, true)
        setMetaTag('og:site_name', 'NAGEN Vietnam', true)
        
        // Twitter Card Tags
        setMetaTag('twitter:card', 'summary_large_image')
        setMetaTag('twitter:title', 'Ph·∫£n h·ªìi kh√°ch h√†ng v·ªÅ T·∫•m l√≥t NAGEN')
        setMetaTag('twitter:description', 'Xem ƒë√°nh gi√° th·∫≠t t·ª´ kh√°ch h√†ng v·ªÅ t·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN')

        // Structured Data for Reviews
        const structuredData = {
            "@context": "https://schema.org",
            "@type": "Product",
            "name": "T·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN",
            "brand": {
                "@type": "Brand",
                "name": "NAGEN"
            },
            "aggregateRating": {
                "@type": "AggregateRating",
                "ratingValue": "4.9",
                "reviewCount": feedbackData.length,
                "bestRating": "5",
                "worstRating": "1"
            },
            "review": feedbackData.map(feedback => ({
                "@type": "Review",
                "author": {
                    "@type": "Person",
                    "name": feedback.name
                },
                "reviewRating": {
                    "@type": "Rating",
                    "ratingValue": feedback.rating,
                    "bestRating": "5"
                },
                "reviewBody": feedback.content,
                "datePublished": feedback.date
            }))
        }

        let script = document.querySelector('script[type="application/ld+json"]') as HTMLScriptElement
        if (script) {
            script.textContent = JSON.stringify(structuredData)
        } else {
            script = document.createElement('script')
            script.type = 'application/ld+json'
            script.textContent = JSON.stringify(structuredData)
            document.head.appendChild(script)
        }
    }, [])

    return (
        <div className="min-h-screen bg-white">
            <ContactFormModal isOpen={isContactModalOpen} onClose={() => setIsContactModalOpen(false)} />
            <header className="bg-white border-b border-gray-200 sticky top-0 z-50 backdrop-blur-md bg-white/95">
                <div className="container mx-auto px-4 py-2">
                    <div className="flex items-center justify-between">
                        <Link href="/" className="flex items-center space-x-3">
                            <Image
                                src={getImagePath("/images/logo_slogan_1.png")}
                                alt="Nagen Logo"
                                width={220}
                                height={44}
                                priority
                                className="h-8 object-contain"
                            />
                        </Link>
                        <Link href="/">
                            <Button variant="outline" className="flex items-center space-x-2 hover:bg-blue-50 transition-colors">
                                <ArrowLeft className="w-4 h-4" />
                                <span>Quay l·∫°i trang ch·ªß</span>
                            </Button>
                        </Link>
                    </div>
                </div>
            </header>
            <div className="w-full h-[8px]">
                <div className="bg-red-600 w-full !h-[calc(8px/1.5)] md:!h-[calc(12px/1.5)]"></div>
                <div className="bg-[#21395D] w-full !h-[calc(8px/1.5)] md:!h-[calc(12px/1.5)]"></div>
            </div>

            <section className="relative bg-[#21395D] text-white py-4 lg:py-8 overflow-hidden">
                <div className="absolute inset-0 bg-black/20"></div>
                <div className="container mx-auto px-4 relative z-10">
                    <div className="text-center max-w-4xl mx-auto">
                        <Badge className="bg-white/20 text-white border-white/30 text-sm px-3 py-1 mb-2">‚≠ê Ph·∫£n h·ªìi kh√°ch h√†ng</Badge>
                        <h1 className="text-2xl lg:text-4xl font-bold leading-tight mb-2">
                            Kh√°ch h√†ng n√≥i g√¨ v·ªÅ
                            <span className="text-red-300 inline-block ml-2">T·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN?</span>
                        </h1>
                        <p className="text-base text-blue-100 leading-relaxed max-w-3xl mx-auto mb-3">
                            H∆°n 4 tri·ªáu ng∆∞·ªùi tin d√πng tr√™n to√†n th·∫ø gi·ªõi - Nh·ªØng c√¢u chuy·ªán th·∫≠t t·ª´ kh√°ch h√†ng ƒë√£ s·ª≠ d·ª•ng s·∫£n ph·∫©m NAGEN
                        </p>
                    </div>
                </div>
            </section>

            <section className="py-8 md:py-16 bg-gray-50">
                <div className="container mx-auto px-4">
                    <div className="flex flex-wrap gap-3 md:gap-4 justify-center mb-6 md:mb-8">
                        <Button
                            variant={filter === "all" ? "default" : "outline"}
                            onClick={() => setFilter("all")}
                            className="rounded-full"
                        >
                            T·∫•t c·∫£ ({feedbackData.length})
                        </Button>
                        <Button
                            variant={filter === "5-star" ? "default" : "outline"}
                            onClick={() => setFilter("5-star")}
                            className="rounded-full"
                        >
                            5 sao ({feedbackData.filter(f => f.rating === 5).length})
                        </Button>
                        <Button
                            variant={filter === "video" ? "default" : "outline"}
                            onClick={() => setFilter("video")}
                            className="rounded-full"
                        >
                            C√≥ video ({feedbackData.filter(f => f.videoUrl).length})
                        </Button>
                    </div>

                    <div className="space-y-6 md:space-y-8">
                        {filteredFeedback.map((feedback) => (
                            <FeedbackCard key={feedback.id} feedback={feedback} />
                        ))}
                    </div>

                    {filteredFeedback.length === 0 && (
                        <div className="text-center py-16">
                            <p className="text-gray-500 text-lg">Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.</p>
                        </div>
                    )}
                </div>
            </section>

            <section className="relative bg-[#21395D] text-white py-12 md:py-20 overflow-hidden">
                <div className="absolute inset-0 opacity-10">
                    <div className="absolute top-10 left-10 w-20 h-20 border border-white/20 rounded-full"></div>
                    <div className="absolute top-32 right-20 w-16 h-16 border border-white/20 rounded-full"></div>
                    <div className="absolute bottom-20 left-1/4 w-12 h-12 border border-white/20 rounded-full"></div>
                    <div className="absolute bottom-32 right-1/3 w-24 h-24 border border-white/20 rounded-full"></div>
                </div>
                
                <div className="container mx-auto px-4 relative z-10">
                    <div className="max-w-4xl mx-auto text-center">
                        <div className="inline-flex items-center justify-center w-12 h-12 md:w-16 md:h-16 bg-white/10 rounded-full mb-4 md:mb-6 backdrop-blur-sm">
                            <Star className="w-6 h-6 md:w-8 md:h-8 text-yellow-400" />
                        </div>
                        
                        <h2 className="text-2xl md:text-3xl lg:text-4xl font-bold mb-3 md:mb-4 leading-tight px-4">
                            B·∫°n c≈©ng mu·ªën chia s·∫ª tr·∫£i nghi·ªám c·ªßa m√¨nh?
                        </h2>
                        
                        <p className="text-base md:text-lg lg:text-xl text-blue-100 mb-8 md:mb-10 max-w-2xl mx-auto leading-relaxed px-4">
                            H√£y ƒë·ªÉ l·∫°i ƒë√°nh gi√° v√† gi√∫p nh·ªØng ng∆∞·ªùi kh√°c ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒë√∫ng ƒë·∫Øn
                        </p>
                        
                        <div className="flex flex-col sm:flex-row gap-4 md:gap-6 justify-center items-center px-4">
                            <div className="w-full sm:w-auto">
                                <div className="group relative">
                                    <div className="absolute -inset-1 bg-gradient-to-r from-red-500 to-pink-500 rounded-xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                                    <Button 
                                        size="lg" 
                                        onClick={() => setIsContactModalOpen(true)}
                                        className="relative bg-red-600 hover:bg-red-700 text-white px-6 md:px-8 py-3 md:py-4 text-base md:text-lg font-semibold rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 w-full sm:w-auto"
                                    >
                                        <Mail className="w-4 h-4 md:w-5 md:h-5 mr-2 md:mr-3" />
                                        <span className="whitespace-nowrap">ƒê·ªÉ l·∫°i th√¥ng tin li√™n h·ªá</span>
                                    </Button>
                                </div>
                            </div>
                            
                            <Link href="/tat-ca-san-pham" className="w-full sm:w-auto">
                                <div className="group relative">
                                    <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-xl blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
                                    <Button 
                                        size="lg" 
                                        className="relative bg-white/10 hover:bg-white hover:text-blue-900 text-white border-2 border-white/30 hover:border-white px-6 md:px-8 py-3 md:py-4 text-base md:text-lg font-semibold rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 backdrop-blur-sm w-full sm:w-auto"
                                    >
                                        <CheckCircle className="w-4 h-4 md:w-5 md:h-5 mr-2 md:mr-3" />
                                        <span className="whitespace-nowrap">Xem t·∫•t c·∫£ s·∫£n ph·∫©m</span>
                                    </Button>
                                </div>
                            </Link>
                        </div>
                        

                    </div>
                </div>
            </section>


            <Footer />
        </div>
    )
}