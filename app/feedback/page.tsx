"use client"

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Star, ArrowLeft, Play, Pause, Volume2, VolumeX, CheckCircle, MapPin, Phone, Mail } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import Head from "next/head"
import { getImagePath } from "@/lib/utils"

interface CustomerFeedback {
    id: number
    name: string
    age?: number
    location: string
    occupation?: string
    rating: number
    content: string
    image?: string
    videoUrl?: string
    additionalImages?: string[]
    date: string
    productUsed: string
    verified: boolean
}

const feedbackData: CustomerFeedback[] = [
    {
        id: 1,
        name: "Nguy·ªÖn VƒÉn Minh",
        age: 45,
        location: "H√† N·ªôi",
        occupation: "K·ªπ s∆∞",
        rating: 5,
        content: "T√¥i ƒë√£ s·ª≠ d·ª•ng t·∫•m l√≥t NAGEN ƒë∆∞·ª£c 6 th√°ng v√† c·∫£m th·∫•y r·∫•t h√†i l√≤ng. ƒêau ch√¢n c·ªßa t√¥i ƒë√£ gi·∫£m ƒë√°ng k·ªÉ, ƒë·∫∑c bi·ªát l√† sau nh·ªØng ng√†y l√†m vi·ªác d√†i. Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m r·∫•t t·ªët, b·ªÅn v√† tho·∫£i m√°i.",
        image: "/placeholder.svg?height=80&width=80&text=Minh",
        videoUrl: "/videos/feedback/customer1.mp4",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Before",
            "/placeholder.svg?height=200&width=300&text=After"
        ],
        date: "2024-01-15",
        productUsed: "T·∫•m l√≥t Sungen",
        verified: true
    },
    {
        id: 2,
        name: "Tr·∫ßn Th·ªã Lan",
        age: 38,
        location: "TP.HCM",
        occupation: "Gi√°o vi√™n",
        rating: 5,
        content: "Sau khi sinh con, t√¥i b·ªã ƒëau ch√¢n r·∫•t nhi·ªÅu. S·ª≠ d·ª•ng t·∫•m l√≥t NAGEN ƒë∆∞·ª£c 3 th√°ng, t√¥i c·∫£m th·∫•y ƒëi l·∫°i nh·∫π nh√†ng h∆°n r·∫•t nhi·ªÅu. S·∫£n ph·∫©m th·ª±c s·ª± hi·ªáu qu·∫£ v√† ƒë√°ng tin c·∫≠y.",
        image: "/placeholder.svg?height=80&width=80&text=Lan",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Product",
            "/placeholder.svg?height=200&width=300&text=Usage"
        ],
        date: "2024-02-20",
        productUsed: "T·∫•m l√≥t Winagen",
        verified: true
    },
    {
        id: 3,
        name: "L√™ VƒÉn ƒê·ª©c",
        age: 52,
        location: "ƒê√† N·∫µng",
        occupation: "B√°c sƒ©",
        rating: 5,
        content: "V·ªõi t∆∞ c√°ch l√† b√°c sƒ©, t√¥i ph·∫£i ƒë·ª©ng nhi·ªÅu gi·ªù li√™n t·ª•c. T·∫•m l√≥t NAGEN gi√∫p t√¥i gi·∫£m m·ªát m·ªèi v√† ƒëau nh·ª©c ·ªü b√†n ch√¢n. T√¥i c≈©ng ƒë√£ gi·ªõi thi·ªáu cho nhi·ªÅu b·ªánh nh√¢n v√† h·ªç ƒë·ªÅu r·∫•t h√†i l√≤ng.",
        image: "/placeholder.svg?height=80&width=80&text=Duc",
        videoUrl: "/videos/feedback/customer3.mp4",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Doctor",
            "/placeholder.svg?height=200&width=300&text=Hospital"
        ],
        date: "2024-03-10",
        productUsed: "T·∫•m l√≥t Softgen",
        verified: true
    },
    {
        id: 4,
        name: "Ph·∫°m Th·ªã Mai",
        age: 29,
        location: "H·∫£i Ph√≤ng",
        occupation: "Nh√¢n vi√™n vƒÉn ph√≤ng",
        rating: 4,
        content: "T√¥i l√†m vi·ªác vƒÉn ph√≤ng nh∆∞ng th∆∞·ªùng xuy√™n ph·∫£i ƒëi l·∫°i. T·∫•m l√≥t NAGEN gi√∫p t√¥i c·∫£m th·∫•y tho·∫£i m√°i h∆°n khi ƒëi gi√†y cao g√≥t. Ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω.",
        image: "/placeholder.svg?height=80&width=80&text=Mai",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Office",
            "/placeholder.svg?height=200&width=300&text=Heels"
        ],
        date: "2024-03-25",
        productUsed: "T·∫•m l√≥t Silhouette",
        verified: true
    },
    {
        id: 5,
        name: "Ho√†ng VƒÉn T√πng",
        age: 41,
        location: "C·∫ßn Th∆°",
        occupation: "T√†i x·∫ø",
        rating: 5,
        content: "Ngh·ªÅ t√†i x·∫ø ph·∫£i ng·ªìi l√°i xe nhi·ªÅu gi·ªù, ch√¢n t√¥i th∆∞·ªùng b·ªã t√™ v√† ƒëau. T·ª´ khi d√πng t·∫•m l√≥t NAGEN, t√¨nh tr·∫°ng n√†y ƒë√£ c·∫£i thi·ªán r√µ r·ªát. S·∫£n ph·∫©m r·∫•t ƒë√°ng ƒë·∫ßu t∆∞.",
        image: "/placeholder.svg?height=80&width=80&text=Tung",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Driver",
            "/placeholder.svg?height=200&width=300&text=Truck"
        ],
        date: "2024-04-05",
        productUsed: "T·∫•m l√≥t Endurance",
        verified: true
    },
    {
        id: 6,
        name: "Nguy·ªÖn Th·ªã H∆∞∆°ng",
        age: 35,
        location: "Hu·∫ø",
        occupation: "Y t√°",
        rating: 5,
        content: "C√¥ng vi·ªác y t√° ƒë√≤i h·ªèi ph·∫£i ƒë·ª©ng v√† ƒëi l·∫°i li√™n t·ª•c. T·∫•m l√≥t NAGEN ƒë√£ gi√∫p t√¥i gi·∫£m ƒëau ch√¢n v√† c·∫£i thi·ªán t∆∞ th·∫ø ƒë·ª©ng. T√¥i r·∫•t khuy√™n d√πng cho nh·ªØng ng∆∞·ªùi c√πng ngh·ªÅ.",
        image: "/placeholder.svg?height=80&width=80&text=Huong",
        videoUrl: "/videos/feedback/customer6.mp4",
        additionalImages: [
            "/placeholder.svg?height=200&width=300&text=Nurse",
            "/placeholder.svg?height=200&width=300&text=Medical"
        ],
        date: "2024-04-18",
        productUsed: "T·∫•m l√≥t Sungen",
        verified: true
    }
]

function VideoPlayer({ videoUrl, customerName }: { videoUrl: string; customerName: string }) {
    const [isPlaying, setIsPlaying] = useState(false)
    const [isMuted, setIsMuted] = useState(true)
    const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null)

    const handlePlayPause = () => {
        if (videoRef) {
            if (isPlaying) {
                videoRef.pause()
            } else {
                videoRef.play()
            }
        }
    }

    return (
        <div className="relative bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl overflow-hidden aspect-video shadow-lg border border-gray-200">
            <video
                ref={setVideoRef}
                className="w-full h-full object-cover"
                muted={isMuted}
                controls={false}
                onPlay={() => setIsPlaying(true)}
                onPause={() => setIsPlaying(false)}
                poster="/placeholder.svg?height=300&width=400&text=Video"
            >
                <source src={videoUrl} type="video/mp4" />
                Video kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
            </video>

            {/* Play/Pause Overlay */}
            <div className="absolute inset-0 flex items-center justify-center bg-black/20 hover:bg-black/30 transition-colors">
                <Button
                    size="lg"
                    className="bg-red-600 hover:bg-red-700 text-white shadow-xl border-2 border-white/20 rounded-full w-16 h-16 p-0"
                    onClick={handlePlayPause}
                >
                    {isPlaying ? <Pause className="w-8 h-8" /> : <Play className="w-8 h-8 ml-1" />}
                </Button>
            </div>

            {/* Controls */}
            <div className="absolute bottom-4 right-4 flex space-x-2">
                <Button
                    size="sm"
                    variant="ghost"
                    className="bg-black/60 hover:bg-black/80 text-white rounded-full w-10 h-10 p-0"
                    onClick={() => setIsMuted(!isMuted)}
                >
                    {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
                </Button>
            </div>

            {/* Video Label */}
            <div className="absolute top-4 left-4">
                <Badge className="bg-red-600 text-white border-0 shadow-lg">
                    üé• Video t·ª´ {customerName}
                </Badge>
            </div>

            {/* Gradient Overlay for better text visibility */}
            <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-black/20 pointer-events-none"></div>
        </div>
    )
}

function MediaGallery({ feedback }: { feedback: CustomerFeedback }) {
    const [activeTab, setActiveTab] = useState<'video' | 'images'>('video')
    const [currentImageIndex, setCurrentImageIndex] = useState(0)

    const hasVideo = !!feedback.videoUrl
    const hasImages = !!(feedback.additionalImages && feedback.additionalImages.length > 0)

    // N·∫øu ch·ªâ c√≥ video ho·∫∑c ch·ªâ c√≥ ·∫£nh, hi·ªÉn th·ªã tr·ª±c ti·∫øp
    if (hasVideo && !hasImages) {
        return <VideoPlayer videoUrl={feedback.videoUrl!} customerName={feedback.name} />
    }

    if (!hasVideo && hasImages) {
        return (
            <div className="space-y-4">
                <div className="aspect-video rounded-xl overflow-hidden shadow-lg">
                    <Image
                        src={getImagePath(feedback.additionalImages![currentImageIndex])}
                        alt={`${feedback.name} - ·∫¢nh ${currentImageIndex + 1}`}
                        width={400}
                        height={300}
                        className="w-full h-full object-cover"
                    />
                </div>
                {feedback.additionalImages!.length > 1 && (
                    <div className="flex space-x-2 justify-center">
                        {feedback.additionalImages!.map((_, index) => (
                            <button
                                key={index}
                                onClick={() => setCurrentImageIndex(index)}
                                className={`w-3 h-3 rounded-full transition-all ${
                                    index === currentImageIndex ? 'bg-red-600 w-6' : 'bg-gray-300'
                                }`}
                            />
                        ))}
                    </div>
                )}
            </div>
        )
    }

    // N·∫øu c√≥ c·∫£ video v√† ·∫£nh, hi·ªÉn th·ªã tabs
    if (hasVideo && hasImages) {
        return (
            <div className="space-y-4">
                {/* Tabs */}
                <div className="flex bg-gray-100 rounded-lg p-1">
                    <button
                        onClick={() => setActiveTab('video')}
                        className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
                            activeTab === 'video'
                                ? 'bg-white text-red-600 shadow-sm'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        üé• Video
                    </button>
                    <button
                        onClick={() => setActiveTab('images')}
                        className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
                            activeTab === 'images'
                                ? 'bg-white text-red-600 shadow-sm'
                                : 'text-gray-600 hover:text-gray-800'
                        }`}
                    >
                        üì∑ ·∫¢nh ({feedback.additionalImages!.length})
                    </button>
                </div>

                {/* Content */}
                {activeTab === 'video' ? (
                    <VideoPlayer videoUrl={feedback.videoUrl!} customerName={feedback.name} />
                ) : (
                    <div className="space-y-4">
                        <div className="aspect-video rounded-xl overflow-hidden shadow-lg">
                            <Image
                                src={getImagePath(feedback.additionalImages![currentImageIndex])}
                                alt={`${feedback.name} - ·∫¢nh ${currentImageIndex + 1}`}
                                width={400}
                                height={300}
                                className="w-full h-full object-cover"
                            />
                        </div>
                        {feedback.additionalImages!.length > 1 && (
                            <div className="flex space-x-2 justify-center">
                                {feedback.additionalImages!.map((_, index) => (
                                    <button
                                        key={index}
                                        onClick={() => setCurrentImageIndex(index)}
                                        className={`w-3 h-3 rounded-full transition-all ${
                                            index === currentImageIndex ? 'bg-red-600 w-6' : 'bg-gray-300'
                                        }`}
                                    />
                                ))}
                            </div>
                        )}
                    </div>
                )}
            </div>
        )
    }

    // Fallback - ch·ªâ hi·ªÉn th·ªã avatar
    return (
        <div className="bg-gradient-to-br from-blue-100 via-white to-red-100 rounded-xl p-8 text-center aspect-video flex items-center justify-center w-full shadow-inner border border-gray-200">
            <div>
                <div className="relative mb-6">
                    <Image
                        src={getImagePath(feedback.image || "/placeholder.svg")}
                        alt={feedback.name}
                        width={140}
                        height={140}
                        className="rounded-full mx-auto border-4 border-white shadow-xl"
                    />
                    <div className="absolute inset-0 rounded-full bg-gradient-to-t from-blue-500/20 to-transparent"></div>
                </div>
                <h4 className="text-xl font-bold text-blue-900 mb-2">{feedback.name}</h4>
                <p className="text-gray-600 font-medium mb-1">{feedback.location}</p>
                {feedback.occupation && (
                    <p className="text-sm text-blue-600">{feedback.occupation}</p>
                )}
                <div className="mt-4 inline-flex items-center px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm font-medium">
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Kh√°ch h√†ng ƒë√£ x√°c th·ª±c
                </div>
            </div>
        </div>
    )
}

function FeedbackCard({ feedback }: { feedback: CustomerFeedback }) {
    return (
        <Card className="overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 border-0 bg-white">
            <CardContent className="p-0">
                <div className="grid lg:grid-cols-2 gap-0">
                    {/* Th√¥ng tin kh√°ch h√†ng v√† nh·∫≠n x√©t */}
                    <div className="p-8 space-y-6 bg-white">
                        {/* Header v·ªõi avatar v√† th√¥ng tin c∆° b·∫£n */}
                        <div className="flex items-start space-x-4">
                            <div className="relative">
                                <Image
                                    src={getImagePath(feedback.image || "/placeholder.svg")}
                                    alt={feedback.name}
                                    width={70}
                                    height={70}
                                    className="rounded-full border-3 border-blue-100 shadow-md"
                                />
                                {feedback.verified && (
                                    <div className="absolute -bottom-1 -right-1 bg-green-500 rounded-full p-1">
                                        <CheckCircle className="w-4 h-4 text-white" />
                                    </div>
                                )}
                            </div>
                            <div className="flex-1">
                                <h3 className="font-bold text-xl text-blue-900 mb-1">{feedback.name}</h3>
                                <div className="text-sm text-gray-600 space-y-1">
                                    <div className="flex items-center space-x-4">
                                        {feedback.age && <span>üéÇ {feedback.age} tu·ªïi</span>}
                                        <span>üìç {feedback.location}</span>
                                    </div>
                                    {feedback.occupation && (
                                        <p className="text-blue-700 font-medium">üíº {feedback.occupation}</p>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Rating */}
                        <div className="flex items-center space-x-3">
                            <div className="flex">
                                {[...Array(5)].map((_, i) => (
                                    <Star
                                        key={i}
                                        className={`w-6 h-6 ${i < feedback.rating ? "fill-yellow-400 text-yellow-400" : "text-gray-300"
                                            }`}
                                    />
                                ))}
                            </div>
                            <span className="text-lg font-semibold text-gray-700">({feedback.rating}/5)</span>
                        </div>

                        {/* S·∫£n ph·∫©m s·ª≠ d·ª•ng */}
                        <div className="bg-red-50 rounded-lg p-4 border-l-4 border-red-500">
                            <p className="text-sm text-gray-600 mb-1">S·∫£n ph·∫©m ƒë√£ s·ª≠ d·ª•ng:</p>
                            <p className="font-bold text-red-600 text-lg">{feedback.productUsed}</p>
                        </div>

                        {/* N·ªôi dung ƒë√°nh gi√° */}
                        <blockquote className="text-gray-700 text-lg leading-relaxed italic border-l-4 border-blue-200 pl-4 bg-blue-50 p-4 rounded-r-lg">
                            "{feedback.content}"
                        </blockquote>

                        {/* Ng√†y ƒë√°nh gi√° */}
                        <div className="flex items-center text-sm text-gray-500 pt-2 border-t border-gray-100">
                            <span>üìÖ ƒê√°nh gi√° ng√†y: {new Date(feedback.date).toLocaleDateString('vi-VN')}</span>
                        </div>
                    </div>

                    {/* Media Gallery */}
                    <div className="bg-gray-50 p-8 flex items-center justify-center">
                        <MediaGallery feedback={feedback} />
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}

export default function FeedbackPage() {
    const [filter, setFilter] = useState<string>("all")

    const filteredFeedback = feedbackData.filter(feedback => {
        if (filter === "all") return true
        if (filter === "video") return !!feedback.videoUrl
        if (filter === "5-star") return feedback.rating === 5
        return true
    })

    // SEO metadata
    useEffect(() => {
        document.title = "Ph·∫£n h·ªìi kh√°ch h√†ng v·ªÅ T·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN | ƒê√°nh gi√° th·∫≠t t·ª´ ng∆∞·ªùi d√πng"
        
        // Meta description
        const metaDescription = document.querySelector('meta[name="description"]')
        if (metaDescription) {
            metaDescription.setAttribute('content', 'Xem ph·∫£n h·ªìi th·∫≠t t·ª´ h∆°n 4 tri·ªáu kh√°ch h√†ng v·ªÅ t·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN. Video v√† ·∫£nh minh ch·ª©ng t·ª´ ng∆∞·ªùi d√πng th·ª±c t·∫ø t·∫°i Vi·ªát Nam.')
        } else {
            const meta = document.createElement('meta')
            meta.name = 'description'
            meta.content = 'Xem ph·∫£n h·ªìi th·∫≠t t·ª´ h∆°n 4 tri·ªáu kh√°ch h√†ng v·ªÅ t·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN. Video v√† ·∫£nh minh ch·ª©ng t·ª´ ng∆∞·ªùi d√πng th·ª±c t·∫ø t·∫°i Vi·ªát Nam.'
            document.head.appendChild(meta)
        }

        // Keywords
        const metaKeywords = document.querySelector('meta[name="keywords"]')
        if (metaKeywords) {
            metaKeywords.setAttribute('content', 'ph·∫£n h·ªìi kh√°ch h√†ng NAGEN, ƒë√°nh gi√° t·∫•m l√≥t ch√¢n, feedback NAGEN, kh√°ch h√†ng n√≥i g√¨ v·ªÅ NAGEN, review t·∫•m l√≥t v√≤m b√†n ch√¢n')
        } else {
            const meta = document.createElement('meta')
            meta.name = 'keywords'
            meta.content = 'ph·∫£n h·ªìi kh√°ch h√†ng NAGEN, ƒë√°nh gi√° t·∫•m l√≥t ch√¢n, feedback NAGEN, kh√°ch h√†ng n√≥i g√¨ v·ªÅ NAGEN, review t·∫•m l√≥t v√≤m b√†n ch√¢n'
            document.head.appendChild(meta)
        }

        // Open Graph
        const ogTitle = document.querySelector('meta[property="og:title"]')
        if (ogTitle) {
            ogTitle.setAttribute('content', 'Ph·∫£n h·ªìi kh√°ch h√†ng v·ªÅ T·∫•m l√≥t NAGEN - ƒê√°nh gi√° th·∫≠t t·ª´ ng∆∞·ªùi d√πng')
        }

        const ogDescription = document.querySelector('meta[property="og:description"]')
        if (ogDescription) {
            ogDescription.setAttribute('content', 'H∆°n 4 tri·ªáu ng∆∞·ªùi tin d√πng NAGEN tr√™n to√†n th·∫ø gi·ªõi. Xem video v√† ·∫£nh ph·∫£n h·ªìi th·∫≠t t·ª´ kh√°ch h√†ng Vi·ªát Nam.')
        }
    }, [])

    return (
        <div className="min-h-screen bg-white">
            {/* Header */}
            <header className="bg-white border-b border-gray-200 sticky top-0 z-50 backdrop-blur-md bg-white/95">
                <div className="container mx-auto px-4 py-2">
                    <div className="flex items-center justify-between">
                        <Link href="/" className="flex items-center space-x-3">
                            <Image
                                src={getImagePath("/images/logo_slogan_1.png")}
                                alt="Nagen Logo"
                                width={220}
                                height={44}
                                priority
                                className="h-8 object-contain"
                            />
                        </Link>
                        <Link href="/">
                            <Button variant="outline" className="flex items-center space-x-2 hover:bg-blue-50 transition-colors">
                                <ArrowLeft className="w-4 h-4" />
                                <span>Quay l·∫°i trang ch·ªß</span>
                            </Button>
                        </Link>
                    </div>
                </div>
            </header>
            <div className="w-full h-[8px]">
                <div className="bg-red-600 w-full !h-[calc(8px/1.5)] md:!h-[calc(12px/1.5)]"></div>
                <div className="bg-[#21395D] w-full !h-[calc(8px/1.5)] md:!h-[calc(12px/1.5)]"></div>
            </div>

            {/* Hero Section */}
            <section className="relative bg-[#21395D] text-white py-4 lg:py-8 overflow-hidden">
                <div className="absolute inset-0 bg-black/20"></div>
                <div className="container mx-auto px-4 relative z-10">
                    <div className="text-center max-w-4xl mx-auto">
                        <Badge className="bg-white/20 text-white border-white/30 text-sm px-3 py-1 mb-2">‚≠ê Ph·∫£n h·ªìi kh√°ch h√†ng</Badge>
                        <h1 className="text-2xl lg:text-4xl font-bold leading-tight mb-2">
                            Kh√°ch h√†ng n√≥i g√¨ v·ªÅ
                            <span className="text-red-300 inline-block ml-2">T·∫•m l√≥t h·ªó tr·ª£ v√≤m b√†n ch√¢n NAGEN?</span>
                        </h1>
                        <p className="text-base text-blue-100 leading-relaxed max-w-3xl mx-auto mb-3">
                            H∆°n 4 tri·ªáu ng∆∞·ªùi tin d√πng tr√™n to√†n th·∫ø gi·ªõi - Nh·ªØng c√¢u chuy·ªán th·∫≠t t·ª´ kh√°ch h√†ng ƒë√£ s·ª≠ d·ª•ng s·∫£n ph·∫©m NAGEN
                        </p>
                    </div>
                </div>
            </section>

            {/* Filters */}
            <section className="py-16 bg-gray-50">
                <div className="container mx-auto px-4">
                    <div className="flex flex-wrap gap-4 justify-center mb-8">
                        <Button
                            variant={filter === "all" ? "default" : "outline"}
                            onClick={() => setFilter("all")}
                            className="rounded-full"
                        >
                            T·∫•t c·∫£ ({feedbackData.length})
                        </Button>
                        <Button
                            variant={filter === "5-star" ? "default" : "outline"}
                            onClick={() => setFilter("5-star")}
                            className="rounded-full"
                        >
                            5 sao ({feedbackData.filter(f => f.rating === 5).length})
                        </Button>
                        <Button
                            variant={filter === "video" ? "default" : "outline"}
                            onClick={() => setFilter("video")}
                            className="rounded-full"
                        >
                            C√≥ video ({feedbackData.filter(f => f.videoUrl).length})
                        </Button>
                    </div>

                    {/* Feedback Grid */}
                    <div className="space-y-8">
                        {filteredFeedback.map((feedback) => (
                            <FeedbackCard key={feedback.id} feedback={feedback} />
                        ))}
                    </div>

                    {filteredFeedback.length === 0 && (
                        <div className="text-center py-16">
                            <p className="text-gray-500 text-lg">Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.</p>
                        </div>
                    )}
                </div>
            </section>



            {/* Contact Section */}
            <section className="bg-white" itemScope itemType="https://schema.org/ContactPage">
                {/* Decorative Border */}
                <div className="w-full h-[8px]">
                    <div className="bg-red-600 w-full !h-[calc(6px/1.5)] md:!h-[calc(10px/1.5)]"></div>
                    <div className="bg-[#21395D] w-full !h-[calc(6px/1.5)] md:!h-[calc(10px/1.5)]"></div>
                </div>
                
                <div className="container mx-auto px-4 py-6">
                    <div className="text-center mb-6">
                        <h2 className="text-xl md:text-2xl font-bold text-blue-900 mb-2">
                            B·∫°n c≈©ng mu·ªën chia s·∫ª tr·∫£i nghi·ªám c·ªßa m√¨nh?
                        </h2>
                        <p className="text-base md:text-lg text-red-600 font-medium mb-3">
                            H√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i
                        </p>
                        <p className="text-sm md:text-base text-gray-600 max-w-lg mx-auto">
                            ƒê·ªôi ng≈© NAGEN lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 max-w-3xl mx-auto" itemScope itemType="https://schema.org/Organization">
                        {/* Hotline */}
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                            <div className="w-10 h-10 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-2">
                                <Phone className="w-5 h-5 text-white" />
                            </div>
                            <h3 className="font-semibold text-blue-900 mb-1 text-sm">Hotline</h3>
                            <p className="text-base font-bold text-red-600" itemProp="telephone">
                                <a href="tel:0966578008" className="hover:underline">0966578008</a>
                            </p>
                        </div>

                        {/* Email */}
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                            <div className="w-10 h-10 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-2">
                                <Mail className="w-5 h-5 text-white" />
                            </div>
                            <h3 className="font-semibold text-blue-900 mb-1 text-sm">Email</h3>
                            <p className="text-base font-bold text-red-600" itemProp="email">
                                <a href="mailto:nagen@nagen.vn" className="hover:underline">nagen@nagen.vn</a>
                            </p>
                        </div>

                        {/* ƒê·ªãa ch·ªâ */}
                        <div className="text-center p-3 bg-gray-50 rounded-lg">
                            <div className="w-10 h-10 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-2">
                                <MapPin className="w-5 h-5 text-white" />
                            </div>
                            <h3 className="font-semibold text-blue-900 mb-1 text-sm">ƒê·ªãa ch·ªâ</h3>
                            <p className="text-sm text-gray-700" itemProp="address" itemScope itemType="https://schema.org/PostalAddress">
                                <span itemProp="streetAddress">T·∫ßng 7, T√≤a VP-1, Suntquare Building</span>, 
                                <span itemProp="addressLocality"> H√† N·ªôi</span>
                            </p>
                        </div>
                    </div>

                    {/* CTA Button */}
                    <div className="text-center pb-4">
                        <Link href="/" aria-label="Quay l·∫°i trang ch·ªß NAGEN">
                            <Button className="bg-blue-900 hover:bg-blue-800 text-white px-4 py-2 text-sm md:text-base transition-colors">
                                <ArrowLeft className="w-4 h-4 mr-2" />
                                Quay l·∫°i trang ch·ªß
                            </Button>
                        </Link>
                    </div>
                </div>
            </section>
        </div>
    )
}
